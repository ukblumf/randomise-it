{
    "title": "Tutorial - READ ME FIRST",
    "body": "The tutorial data contains a number of tables and macros.\nThis story explains each one, please have a look at them, play with them, and then start creating your own or using others!\nRandomise your Imagination!\n\nWith all Tables and Macros you can search for these examples either by scrolling through the list on the right or using \nthe search box to narrow down results.  Clicking on the macro or table will show a popup box with the result, which you can then insert\ninto the current story. If you don't like result, click refresh or close. \nIf you want to inspect contents of a table or macro go to front page and click edit against them.\n\n\nTHE FIRST TABLE\n---------------------------------\nHere is a simple table with a list of colours.\nAs with all tables each selection needs to be on a separate line.\nThere are no lines numbers so each line has equal weight.\n\nTutorial 1 - Colours\nBlack\nBlue\nRed\nGreen\nWhite\nYellow\nOrange\n\n\nLINE NUMBERS\n---------------------------------\nLine Numbers are used to weight a selection. You specify the number or number range followed by a double colon.\nIf all the entries on your Table have the same chance then you don't need to add numbers, \nwon't hurt if you do but table looks a bit cleaner without numbers.\nNote: You cannot mix lines in a table with and without numbers, it's either line numbers or not\n\nTutorial 2 - Gems\n1::Diamond\n2::Emerald\n3-5::Topaz\n6-8::Opal\n9::Ruby\n10::Sapphire\n11-15::Amethyst\n16-20::Garnet\n\n\nGENERATING NUMBERS\n---------------------------------\nGenerating numbers, note the number generators are surrounded by double brackets\n\n\nTutorial 3 - Generating Numbers\n((<number of dice>d<die type>)), e.g. ((2d4)), ((3d6)), ((1d20))\n((<low range>-<high range>)), e.g ((1-10)), ((13-24)), ((1-100))\n((<number of dice>d<die type>x<multiplier>)), e.g. ((3d6x10)), ((1d12x100))\n((<number of dice>d<die type>+<add>)), e.g. ((2d4+2)), ((3d6+4))\n((<number of dice>d<die type>-<subtract>)), e.g. ((4d4-1)), ((3d6-2))\n((<low range>-<high range>x<multiplier>)), e.g. ((1-10x100)), ((3-18x10))\n((dice chain)), e.g ((1d6+1d4+1)), ((3d6+2d8-2)), ((6+1d6+1d8-2))\n\n\nLINKING TABLES\n---------------------------------\nWhat's the fun of random tables unless you can start linking them together.\nWhen you create a table, you can insert other tables by selecting them from the Tables lists. \nYou could type in the identifier but far easier to select from lists.\n\nTutorial 4 - Linking tables\n<<blumf.table.tutorial-1-colours>> is my favourite colour\nMy favourite gem is a <<blumf.table.tutorial-2-gems>>\nThe numbers <<blumf.table.tutorial-3-generating-numbers>> are the code to the safe\n\n\nLINKING TABLES - ADVANCED\n---------------------------------\nMore interesting ways of linking tables, using multipliers with links, and line numbers.\nThis table shows the syntax for using a multiplier (which can be dice notation, a range or a fixed number) with the linked table.\n\nTutorial 5 - Linking tables Advanced\n1-3::My favourite colours are ((1d2x<<blumf.table.tutorial-1-colours>>))\n4-8::My favourite gems are ((2x<<blumf.table.tutorial-2-gems>>))\n9-12::Which of these numbers <<blumf.table.tutorial-3-generating-numbers>> do you like?\n13-14::Links within links - <<blumf.table.tutorial-4-linking-tables>>\n15::Hi\n\n\nMACROS\n---------------------------------\nRandom tables can be used within macros to help tie together multiple tables.\n\nTutorial 6 - First Macro\na <<blumf.table.tutorial-1-colours>> house, upon the door is a knocker inset with a large <<blumf.table.tutorial-2-gems>>.\nThere are ((2d4)) windows scattered across the frontage.\nFrom with a voice can be heard reciting numbers - \"<<blumf.table.tutorial-3-generating-numbers>>\"\n\n\nLINKING MACROS AND TABLES\n---------------------------------\nSame as with tables macros can link to tables or macros, with multipliers if required.\n\nTutorial 7 - Linking Macros and Tables\nThe first house your meet is <<blumf.macro.tutorial-6-first-macro>>\nThe road that leads to it is coloured ((3-4x<<blumf.table.tutorial-1-colours>>)).\nBeyond are ((2d6)) more houses of similar design.\n\n\nLINK CHANCE\n---------------------------------\nYou can give a table or macro a chance of being selected by including a % number within the opening << brackets\n\nTutorial 8 - Chance\n20% chance of having a gem - <<20% blumf.table.tutorial-2-gems>>\n50% chance of weird house - <<50% blumf.macro.tutorial-6-first-macro>>\n\n\nMACRO DIRECTIVES\n---------------------------------\nThe next few tutorials cover the simple language options available in a macro, each directive is enclosed in [[ ]]\n\n\nLOOP\n---------------------------------\nThe LOOP directive allows you to set up a simple loop, which is always does one pass.\n\nTutorial 9 - Loops\n[[LOOP:tutorial]]\nA <<blumf.table.tutorial-1-colours>> <<blumf.table.tutorial-2-gems>>\n[[ENDLOOP:tutorial=5]]\n\nBreaking that down the [[LOOP:tutorial]] represents the start of the loop and the loop name.\nthe [[ENDLOOP:tutorial=5]] represents the end of the loop for that variable and the maximum number of\niterations. \nEach loop will do at least one pass.\n\n\nIF\n---------------------------------\nThe IF directive gives a % chance to insert the table/macro and/or text into the macro.\n\nTutorial 10 - IF\nGood chance nothing will appear below:\n[[IF:50%:The sky has <<blumf.table.tutorial-1-colours>> clouds]]\n[[IF:50%:You see a flock of birds bearing a <<blumf.table.tutorial-2-gems>> in their clawed feet]]\n\nIF's can also have a false outcome added\n[[IF:50%:This is true:This is false]]\n\n\nCHOICE\n---------------------------------\nThe CHOICE directive is like an inline table, it allows you to build a selection of items.\nCHOICE is followed by a set of colon separated options. One of which will be picked and inserted into text\n\nTutorial 11 - Choice\nLooking out across the field you see [[CHOICE:nothing unusual:Two gems, ((2x<<blumf.table.tutorial-2-gems>>)), lying on the ground:a <<blumf.table.tutorial-1-colours>> cow, standing next to a <<blumf.table.tutorial-1-colours>> beanstalk.]]\n\n\nVAR\n---------------------------------\nVAR allows you to assign values to variable names, which in turn can be used within the macros or tables used.\n\nSetting a VAR\n[[VAR:name:Gary Gygax]]\n\nHello my name is not [[VAR:name]]\n\nValues of VARs can be from tables, CHOICE or macros\ne.g \n[[VAR:name:[[CHOICE:Gary:Dave:Jeff]]]]\n\nMy name is [[VAR:name]]\n\n",
    "pins": ""
}