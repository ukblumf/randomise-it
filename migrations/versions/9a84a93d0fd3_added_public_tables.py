"""Added public tables

Revision ID: 9a84a93d0fd3
Revises: 9be558b8aa14
Create Date: 2020-06-03 13:42:11.110376

"""

# revision identifiers, used by Alembic.
revision = '9a84a93d0fd3'
down_revision = '9be558b8aa14'

from alembic import op
import sqlalchemy as sa


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('public_collection',
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('definition', sa.Text(), nullable=True),
    sa.Column('permissions', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', 'author_id')
    )
    with op.batch_alter_table('public_collection', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_public_collection_tags'), ['tags'], unique=False)
        batch_op.create_index(batch_op.f('ix_public_collection_timestamp'), ['timestamp'], unique=False)

    op.create_table('public_linked_collections',
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('collection_id', sa.Text(), nullable=False),
    sa.Column('original_author_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['original_author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('author_id', 'collection_id', 'original_author_id')
    )
    op.create_table('public_linked_macros',
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('macro_id', sa.Text(), nullable=False),
    sa.Column('original_author_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['original_author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('author_id', 'macro_id', 'original_author_id')
    )
    op.create_table('public_linked_tables',
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('table_id', sa.Text(), nullable=False),
    sa.Column('original_author_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['original_author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('author_id', 'table_id', 'original_author_id')
    )
    op.create_table('public_macros',
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('definition', sa.Text(), nullable=True),
    sa.Column('definition_html', sa.Text(), nullable=True),
    sa.Column('permissions', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', 'author_id')
    )
    with op.batch_alter_table('public_macros', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_public_macros_tags'), ['tags'], unique=False)
        batch_op.create_index(batch_op.f('ix_public_macros_timestamp'), ['timestamp'], unique=False)

    op.create_table('public_random_table',
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('definition', sa.Text(), nullable=True),
    sa.Column('min', sa.Integer(), nullable=True),
    sa.Column('max', sa.Integer(), nullable=True),
    sa.Column('description_html', sa.Text(), nullable=True),
    sa.Column('permissions', sa.Integer(), nullable=True),
    sa.Column('line_type', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', 'author_id')
    )
    with op.batch_alter_table('public_random_table', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_public_random_table_tags'), ['tags'], unique=False)
        batch_op.create_index(batch_op.f('ix_public_random_table_timestamp'), ['timestamp'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('public_random_table', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_public_random_table_timestamp'))
        batch_op.drop_index(batch_op.f('ix_public_random_table_tags'))

    op.drop_table('public_random_table')
    with op.batch_alter_table('public_macros', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_public_macros_timestamp'))
        batch_op.drop_index(batch_op.f('ix_public_macros_tags'))

    op.drop_table('public_macros')
    op.drop_table('public_linked_tables')
    op.drop_table('public_linked_macros')
    op.drop_table('public_linked_collections')
    with op.batch_alter_table('public_collection', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_public_collection_timestamp'))
        batch_op.drop_index(batch_op.f('ix_public_collection_tags'))

    op.drop_table('public_collection')
    # ### end Alembic commands ###
